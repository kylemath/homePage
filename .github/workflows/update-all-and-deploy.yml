name: Update All Content and Deploy

on:
  schedule:
    - cron: '0 1 * * *'  # Run daily at 1 AM (projects)
    - cron: '0 2 1 * *'  # Run monthly on 1st day at 2 AM (publications)
  workflow_dispatch:  # Allow manual trigger
    inputs:
      update_projects:
        description: 'Update projects list'
        required: false
        default: true
        type: boolean
      update_publications:
        description: 'Update publications list'
        required: false
        default: true
        type: boolean
      update_contributor_projects:
        description: 'Update contributor projects list'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]  # Also run on pushes to main

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install basic dependencies
          pip install -r requirements.txt
          # Install publications dependencies
          pip install requests beautifulsoup4 lxml
          # Try to install scholarly, but don't fail if it doesn't work
          pip install scholarly || echo "scholarly installation failed, using basic scraping"
          
      - name: Update projects list
        if: |
          (github.event_name == 'schedule' && github.event.schedule == '0 1 * * *') ||
          github.event_name == 'push' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.update_projects == 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating projects list..."
          python update_projects.py
        
      - name: Update contributor projects list
        if: |
          (github.event_name == 'schedule' && github.event.schedule == '0 1 * * *') ||
          github.event_name == 'push' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.update_contributor_projects == 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating contributor projects list..."
          python update_contributor_projects.py
        
      - name: Update publications list
        if: |
          (github.event_name == 'schedule' && github.event.schedule == '0 2 1 * *') ||
          github.event_name == 'push' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.update_publications == 'true')
        timeout-minutes: 10
        run: |
          echo "Updating publications list..."
          
          # Create backup of current publications section
          echo "Creating backup of current publications..."
          cp index.html index.html.backup
          
          # Count current publications to ensure we don't replace a good list with fewer items
          CURRENT_COUNT=$(grep -c '<li><a href.*target="_blank">' index.html || echo "0")
          echo "Current publications count: $CURRENT_COUNT"
          
          # Try basic scraping first (more reliable in GitHub Actions environment)
          BASIC_SUCCESS=false
          echo "Trying basic scraping version first with 4 minute timeout..."
          if timeout 240 python update_publications.py; then
            echo "Basic script completed successfully"
            # Count new publications
            NEW_COUNT=$(grep -c '<li><a href.*target="_blank">' index.html || echo "0")
            echo "New publications count from basic scraping: $NEW_COUNT"
            
            # Validate the update
            if [ "$NEW_COUNT" -ge 50 ]; then
              echo "Basic scraping update successful with $NEW_COUNT publications"
              BASIC_SUCCESS=true
            else
              echo "Basic scraping produced too few publications ($NEW_COUNT), restoring backup"
              cp index.html.backup index.html
            fi
          else
            echo "Basic scraping failed or timed out, restoring backup"
            cp index.html.backup index.html
          fi
          
          # If basic scraping failed, try scholarly version as fallback
          if [ "$BASIC_SUCCESS" = false ]; then
            echo "Trying scholarly version as fallback with 3 minute timeout..."
            if timeout 180 python update_publications_scholarly.py; then
              echo "Scholarly script completed successfully"
              # Count new publications
              NEW_COUNT=$(grep -c '<li><a href.*target="_blank">' index.html || echo "0")
              echo "New publications count from scholarly: $NEW_COUNT"
              
              # Validate the update
              if [ "$NEW_COUNT" -ge 50 ]; then
                echo "Scholarly update successful with $NEW_COUNT publications"
              else
                echo "Scholarly update also produced too few publications ($NEW_COUNT), restoring backup"
                cp index.html.backup index.html
              fi
            else
              echo "Scholarly script also failed or timed out, restoring backup"
              cp index.html.backup index.html
            fi
          fi
          
          # Clean up backup file
          rm -f index.html.backup
          
          # Final validation
          FINAL_COUNT=$(grep -c '<li><a href.*target="_blank">' index.html || echo "0")
          echo "Final publications count: $FINAL_COUNT"
          
          # Set output for notification step
          if [ "$FINAL_COUNT" -lt 50 ]; then
            echo "PUBLICATIONS_UPDATE_FAILED=true" >> $GITHUB_ENV
            echo "Publications update failed - final count: $FINAL_COUNT"
          else
            echo "PUBLICATIONS_UPDATE_FAILED=false" >> $GITHUB_ENV
            echo "Publications update successful - final count: $FINAL_COUNT"
          fi
        
      - name: Notify on publications failure
        if: env.PUBLICATIONS_UPDATE_FAILED == 'true' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'Publications Update Failed';
            const body = `
            ## Publications Update Failed
            
            The automated publications update failed during the scheduled run.
            
            **Possible causes:**
            - Google Scholar is blocking requests
            - Network connectivity issues
            - Changes to Google Scholar's structure
            - Rate limiting
            
            **Action needed:**
            - Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
            - Consider running the update manually
            - The current publications list has been preserved and not overwritten
            
            **Workflow run:** ${{ github.run_id }}
            **Trigger:** ${{ github.event_name }}
            **Time:** ${{ github.event.repository.updated_at }}
            `;
            
            // Check if an issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automation,publications'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Publications Update Failed')
            );
            
            if (!existingIssue) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automation', 'publications', 'bug']
              });
              console.log('Created new issue for publications update failure');
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `Publications update failed again on ${new Date().toISOString()}\n\nWorkflow run: ${{ github.run_id }}`
              });
              console.log('Updated existing issue with new failure');
            }
        
      - name: Check for changes
        id: verify-changed-files
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --name-only
          fi
          
      - name: Commit changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add index.html
          
          # Create a more descriptive commit message
          PROJECTS_UPDATED=""
          PUBLICATIONS_UPDATED=""
          CONTRIBUTOR_PROJECTS_UPDATED=""
          
          if git diff --cached --name-only | grep -q "index.html"; then
            if [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "0 1 * * *" ]; then
              PROJECTS_UPDATED="projects"
              CONTRIBUTOR_PROJECTS_UPDATED="contributor-projects"
            elif [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "0 2 1 * *" ]; then
              PUBLICATIONS_UPDATED="publications"
            else
              PROJECTS_UPDATED="projects"
              CONTRIBUTOR_PROJECTS_UPDATED="contributor-projects"
              PUBLICATIONS_UPDATED="publications"
            fi
          fi
          
          # Build commit message based on what was updated
          UPDATES=()
          [ -n "$PROJECTS_UPDATED" ] && UPDATES+=("projects")
          [ -n "$CONTRIBUTOR_PROJECTS_UPDATED" ] && UPDATES+=("contributor projects")
          [ -n "$PUBLICATIONS_UPDATED" ] && UPDATES+=("publications")
          
          if [ ${#UPDATES[@]} -gt 1 ]; then
            COMMIT_MSG="Update $(IFS=', '; echo "${UPDATES[*]%,*}") and ${UPDATES[-1]} lists [skip ci]"
          elif [ ${#UPDATES[@]} -eq 1 ]; then
            COMMIT_MSG="Update ${UPDATES[0]} list [skip ci]"
          else
            COMMIT_MSG="Update homepage content [skip ci]"
          fi
          
          git commit -m "$COMMIT_MSG"
          
      - name: Push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Deploy to GitHub Pages
        if: steps.verify-changed-files.outputs.changed == 'true' || github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          cname: kylemathewson.com 